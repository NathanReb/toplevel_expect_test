[%%org {|
#+TITLE: Just a regression test ...
|}]

(* Apparently I need a title to please hydra. *)

module Variants = struct
  type bar = [ `Bar ]
  type foo = private [< `Foo | `Bar ]
end

open Variants

module M : sig
  type +'a t

  val foo : unit -> foo t
  val bar : unit -> bar t
end = struct
  type 'a t = 'a list

  let foo () = []
  let bar () = []
end

module type Foo = sig
  val x : foo M.t -> unit
end

let ffoo t (module F : Foo) =
  F.x t

module type Bar = sig
  val x : bar M.t -> unit
end

let fbar t (module B : Bar) =
  B.x t

let (foo : foo M.t) = M.foo ()
let (bar : bar M.t) = M.bar ()

let f1 = ffoo foo;;
[%%expect {||}]

let f2 = ffoo bar;;
[%%expect {|
Line _, characters _-_:
Error: This expression has type bar M.t
       but an expression was expected of type foo M.t
       Type bar = [ `Bar ] is not compatible with type foo
       The first variant type does not allow tag(s) `Foo
|}]

let f3 = fbar foo;;
[%%expect {|
Line _, characters _-_:
Error: This expression has type foo M.t
       but an expression was expected of type bar M.t
       Type foo is not compatible with type bar = [ `Bar ]
       The second variant type does not allow tag(s) `Foo
|}]
