version = "$(pkg_version)"
description = "Expectation tests for the OCaml toplevel"
requires = "bin_prot compiler-libs.common compiler-libs.toplevel core_kernel fieldslib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_core ppx_driver ppx_expect.collector ppx_expect.common ppx_expect.matcher ppx_expect.payload ppx_inline_test.runtime-lib sexplib toplevel_expect_test.glue toplevel_expect_test.types typerep variantslib"
archive(byte  ) = "toplevel_expect_test.cma"
archive(native) = "toplevel_expect_test.cmxa"
plugin(byte  ) = "toplevel_expect_test.cma"
plugin(native) = "toplevel_expect_test.cmxs"
exists_if = "toplevel_expect_test.cma"

package "glue" (
  version = "$(pkg_version)"
  description = ""
  requires = "bin_prot compiler-libs.toplevel core_kernel fieldslib findlib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_here.expander ppx_inline_test.runtime-lib sexplib typerep variantslib"
  archive(byte  ) = "toplevel_expect_test_glue.cma"
  archive(native) = "toplevel_expect_test_glue.cmxa"
  plugin(byte  ) = "toplevel_expect_test_glue.cma"
  plugin(native) = "toplevel_expect_test_glue.cmxs"
  exists_if = "toplevel_expect_test_glue.cma"
)

package "types" (
  version = "$(pkg_version)"
  description = "Types for the output of `ocaml-expect -sexp`"
  requires = "bin_prot core_kernel fieldslib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_inline_test.runtime-lib sexplib typerep variantslib"
  archive(byte  ) = "toplevel_expect_test_types.cma"
  archive(native) = "toplevel_expect_test_types.cmxa"
  plugin(byte  ) = "toplevel_expect_test_types.cma"
  plugin(native) = "toplevel_expect_test_types.cmxs"
  exists_if = "toplevel_expect_test_types.cma"
)
